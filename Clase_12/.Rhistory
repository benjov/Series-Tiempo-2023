start = c(2000, 1),
freq = 12)
ARMA_Ex_DLPax_Nal_2 <- arima(DLPax_Nal, order = c(4, 0, 6),
xreg = cbind(D_Ene, D_Feb, D_Jul, D_Dic, D_May2009, D_Jun2009),
method = "ML")
ARMA_Ex_DLPax_Nal_2
# Datos Exogenos:
Predict_Datos <- read_excel("Predict_Base_Transporte_ARIMA.xlsx", sheet = "Datos", col_names = TRUE)
View(Datos)
View(Predict_Datos)
D_Ene_f <- ts(Predict_Datos$D_Ene,
start = c(2019, 7),
freq = 12)
D_Feb_f <- ts(Predict_Datos$D_Feb,
start = c(2019, 7),
freq = 12)
D_Jul_f <- ts(Predict_Datos$D_Jul,
start = c(2019, 7),
freq = 12)
D_Dic_f <- ts(Predict_Datos$D_Dic,
start = c(2019, 7),
freq = 12)
D_May2009_f <- ts(Predict_Datos$D_May2009,
start = c(2019, 7),
freq = 12)
D_Jun2009_f <- ts(Predict_Datos$D_Jun2009,
start = c(2019, 7),
freq = 12)
?predict
predict(ARMA_Ex_DLPax_Nal_2, n.ahead = 24,
newxreg = cbind(D_Ene_f, D_Feb_f, D_Jul_f, D_Dic_f, D_May2009_f, D_Jun2009_f))
DLPax_Nal_f <- predict(ARMA_Ex_DLPax_Nal_2, n.ahead = 24,
newxreg = cbind(D_Ene_f, D_Feb_f, D_Jul_f, D_Dic_f, D_May2009_f, D_Jun2009_f))
names(DLPax_Nal_f)
o
Pronostico_Arima <- read_excel("Pronostico_Arima.xlsx", sheet = "Datos", col_names = TRUE)
View(Pronostico_Arima)
Pronostico_Arima$Pax_Nal_f <- Pronostico_Arima$Pax_Nal
View(Pronostico_Arima)
View(Pronostico_Arima)
for(i in 1:24){
Pronostico_Arima$Pax_Nal_f[234 + i] <-
Pronostico_Arima$Pax_Nal_f[234 + i - 1]*(1 + DLPax_Nal_f$pred[i])
}
names(DLPax_Nal_f)
DLPax_Nal_f$pred
ggplot(data = Pronostico_Arima, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal_f, color = "Pax_Nal_f")) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
scale_color_brewer(type = "qual", palette = 2) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia"
)
ggplot(data = Pronostico_Arima, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal_f, color = "Pax_Nal_f")) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
scale_color_brewer(type = "qual", palette = 6) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia"
)
ggplot(data = Pronostico_Arima, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal_f, color = "Pax_Nal_f")) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
scale_color_brewer(type = "qual", palette = 2) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia"
)
ggsave("Pax_Nal_f.png", width = 20, height = 15, units = "cm")
ggplot(data = Pronostico_Arima, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal_f/1000, color = "Pax_Nal_f")) +
geom_line(aes(y = Pax_Nal/1000, color = "Pax_Nal")) +
scale_color_brewer(type = "qual", palette = 2) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia"
)
options(scipen = 999)
ggplot(data = Pronostico_Arima, aes(x = Periodo)) +
geom_line(aes(y = Pax_Nal_f, color = "Pax_Nal_f")) +
geom_line(aes(y = Pax_Nal, color = "Pax_Nal")) +
scale_color_brewer(type = "qual", palette = 2) +
#theme_bw() +
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Pasajeros") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Pasajeros en vuelos nacionales (Salidas)",
subtitle = "(Ene-2000 a Jun-2019)",
caption = "Fuente: Elaboración propia"
)
# https://cran.r-project.org/web/packages/x13binary/index.html
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("seasonal")
#install.packages("seasonalview")
#install.packages("shiny")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(seasonal)
library(seasonalview)
library(shiny)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_11")
getwd()
#****************************************************************************************
Datos <- read_excel("Base_VAR.xlsx", sheet = "Datos", col_names = TRUE)
INPC <- ts(Datos$INPC,
start = c(2000, 1),
freq = 12)
? seas
Seas_INPC <- seas(INPC)
names(Seas_INPC)
summary(Seas_INPC)
final(Seas_INPC)
original(Seas_INPC)
cbind(original(Seas_INPC), final(Seas_INPC))
plot(Seas_INPC)
view(Seas_INPC)
view(Seas_INPC)
INPC_Ad <- final(Seas_INPC)
TC <- ts(Datos$TC,
start = c(2000, 1),
freq = 12)
Seas_TC <- seas(TC)
plot(Seas_TC)
TC_Ad <- final(Seas_TC)
CETE28 <- ts(Datos$CETE28,
start = c(2000, 1),
freq = 12)
Seas_CETE28 <- seas(CETE28)
plot(Seas_CETE28)
CETE28_Ad <- final(Seas_CETE28)
IGAE <- ts(Datos$IGAE,
start = c(2000, 1),
freq = 12)
Seas_IGAE <- seas(IGAE)
plot(Seas_IGAE)
IGAE_Ad <- final(Seas_IGAE)
IPI <- ts(Datos$IPI,
start = c(2000, 1),
freq = 12)
Seas_IPI <- seas(IPI)
plot(Seas_IPI)
IPI_Ad <- final(Seas_IPI)
Datos_Ad <- data.frame(cbind(INPC_Ad, TC_Ad, CETE28_Ad, IGAE_Ad, IPI_Ad))
Datos_Ad <- cbind(Datos, Datos_Ad)
save(Datos_Ad, file = "Datos_Ad.RData")
load("Datos_Ad.RData")
IGAE <- ts(Datos$IGAE,
start = c(2000, 1),
freq = 12)
Seas_IGAE <- seas(IGAE)
plot(Seas_IGAE)
# Lambda = 100 for yearly data
# Lambda = 1600 for quarterly data
# Lambda = 14400 for monthly data
#****************************************************************************************
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
#
#****************************************************************************************
setwd("/Users/benjaminolivavazquez/Documents/Personal/Cursos_UNAM/SERIES_2021-I/Series-de-Tiempo-Fall2020/Clase_12")
getwd()
#****************************************************************************************
load("Datos_Ad.RData")
INPC <- ts(Datos_Ad$INPC_Ad,
start = c(2000, 1),
freq = 12)
TC <- ts(Datos_Ad$TC_Ad,
start = c(2000, 1),
freq = 12)
? hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
TC_hpf <- hpfilter(TC, freq = 14400)
plot(TC_hpf)
TC_Trend <- TC_hpf$trend
Datos_HPF <- cbind(Datos_Ad$FECHA,
data.frame(cbind(INPC, INPC_Trend, INPC_Cycle,
TC, TC_Trend, TC_Cycle)))
unlink('Clase_Filtro HP_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
load("Datos_Ad.RData")
head(Datos_Ad)
INPC <- ts(Datos_Ad$INPC_Ad, start = c(2000, 1), freq = 12)
TC <- ts(Datos_Ad$TC_Ad, start = c(2000, 1), freq = 12)
?hpfilter
#?hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
TC_hpf <- hpfilter(TC, freq = 14400)
plot(TC_hpf)
TC_Cycle <- TC_hpf$cycle
TC_Trend <- TC_hpf$trend
Datos_HPF <- cbind(Datos_Ad$FECHA,
data.frame(cbind(INPC,
INPC_Trend,
INPC_Cycle,
TC,
TC_Trend,
TC_Cycle)))
view(Datos_HPF)
View(Datos_HPF)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
load("Datos_Ad.RData")
head(Datos_Ad)
INPC <- ts(Datos_Ad$INPC_Ad, start = c(2000, 1), freq = 12)
TC <- ts(Datos_Ad$TC_Ad, start = c(2000, 1), freq = 12)
#?hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
load("Datos_Ad.RData")
head(Datos_Ad)
INPC <- ts(Datos_Ad$INPC_Ad, start = c(2000, 1), freq = 12)
TC <- ts(Datos_Ad$TC_Ad, start = c(2000, 1), freq = 12)
#?hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
TC_hpf <- hpfilter(TC, freq = 14400)
plot(TC_hpf)
TC_Cycle <- TC_hpf$cycle
TC_Trend <- TC_hpf$trend
Datos_HPF <- cbind(Datos_Ad$FECHA,
data.frame(cbind(INPC,
INPC_Trend,
INPC_Cycle,
TC,
TC_Trend,
TC_Cycle)))
View(Datos_HPF)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#install.packages("plm")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
library(plm)
install.packages("plm")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#install.packages("plm")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
library(plm)
load("Datos_Ad.RData")
head(Datos_Ad)
INPC <- ts(Datos_Ad$INPC_Ad, start = c(2000, 1), freq = 12)
TC <- ts(Datos_Ad$TC_Ad, start = c(2000, 1), freq = 12)
#?hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
TC_hpf <- hpfilter(TC, freq = 14400)
plot(TC_hpf)
TC_Cycle <- TC_hpf$cycle
TC_Trend <- TC_hpf$trend
Datos_HPF <- cbind(Datos_Ad$FECHA,
data.frame(cbind(INPC,
INPC_Trend,
INPC_Cycle,
TC,
TC_Trend,
TC_Cycle)))
st_amant_van_norden_filter <- function(ts_data) {
# Calculate the variance of the series
variance <- var(ts_data)
# Calculate the first difference of the series
diff_ts <- diff(ts_data)
# Calculate the variance of the first difference of the series
variance_diff <- var(diff_ts)
# Calculate lambda based on the St-Amant and Van Norden formula
lambda <- variance / variance_diff
# Apply the Hodrick-Prescott filter with the computed lambda
HP_Filter_StAmantVanNorden <- hpfilter(ts_data, lambda = lambda)
return(HP_Filter_StAmantVanNorden)
}
IGAE <- ts(Datos_Ad$IGAE, start = c(2000, 1), freq = 12)
st_amant_van_norden_filter(IGAE)
?hpfilter
st_amant_van_norden_filter <- function(ts_data) {
# Calculate the variance of the series
variance <- var(ts_data)
# Calculate the first difference of the series
diff_ts <- diff(ts_data)
# Calculate the variance of the first difference of the series
variance_diff <- var(diff_ts)
# Calculate lambda based on the St-Amant and Van Norden formula
lambda <- variance / variance_diff
# Apply the Hodrick-Prescott filter with the computed lambda
HP_Filter_StAmantVanNorden <- hpfilter(ts_data, freq = lambda)
return(HP_Filter_StAmantVanNorden)
}
IGAE <- ts(Datos_Ad$IGAE, start = c(2000, 1), freq = 12)
st_amant_van_norden_filter(IGAE)
IGAE <- ts(Datos_Ad$IGAE, start = c(2000, 1), freq = 12)
st_amant_van_norden_filter(IGAE)
IGAE_hpf_SAvN <- st_amant_van_norden_filter(IGAE)
plot(IGAE_hpf_SAvN)
IGAE_Cycle <- IGAE_hpf_SAvN$cycle
IGAE_Trend <- IGAE_hpf_SAvN$trend
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("dplyr")
#install.packages("readxl")
#install.packages(stats)
#install.packages("mFilter")
#install.packages("plm")
#
library(ggplot2)
library(dplyr)
library(readxl)
library(stats)
library(mFilter)
library(plm)
load("Datos_Ad.RData")
head(Datos_Ad)
INPC <- ts(Datos_Ad$INPC_Ad, start = c(2000, 1), freq = 12)
TC <- ts(Datos_Ad$TC_Ad, start = c(2000, 1), freq = 12)
?hpfilter
#?hpfilter
INPC_hpf <- hpfilter(INPC, freq = 14400)
names(INPC_hpf)
INPC_hpf$cycle
INPC_hpf$trend
INPC_hpf$lambda
INPC_hpf$x
plot(INPC_hpf)
INPC_Cycle <- INPC_hpf$cycle
INPC_Trend <- INPC_hpf$trend
TC_hpf <- hpfilter(TC, freq = 14400)
plot(TC_hpf)
TC_Cycle <- TC_hpf$cycle
TC_Trend <- TC_hpf$trend
Datos_HPF <- cbind(Datos_Ad$FECHA,
data.frame(cbind(INPC,
INPC_Trend,
INPC_Cycle,
TC,
TC_Trend,
TC_Cycle)))
View(Datos_HPF)
st_amant_van_norden_filter <- function(ts_data) {
# Calculate the variance of the series
variance <- var(ts_data)
# Calculate the first difference of the series
diff_ts <- diff(ts_data)
# Calculate the variance of the first difference of the series
variance_diff <- var(diff_ts)
# Calculate lambda based on the St-Amant and Van Norden formula
lambda <- variance / variance_diff
# Apply the Hodrick-Prescott filter with the computed lambda
HP_Filter_StAmantVanNorden <- hpfilter(ts_data, freq = lambda)
return(HP_Filter_StAmantVanNorden)
}
IGAE <- ts(Datos_Ad$IGAE, start = c(2000, 1), freq = 12)
st_amant_van_norden_filter(IGAE)
IGAE_hpf_SAvN <- st_amant_van_norden_filter(IGAE)
plot(IGAE_hpf_SAvN)
IGAE_Cycle <- IGAE_hpf_SAvN$cycle
IGAE_Trend <- IGAE_hpf_SAvN$trend
