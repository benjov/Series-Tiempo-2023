# subset='2021',
theme="white")
chartSeries(BNB,TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
# subset='2021',
theme="white")
ln_BTC <- diff(log(BTC$`BTC-USD.Adjusted`))
ln_ETH <- diff(log(ETH$`ETH-USD.Adjusted`))
ln_BNB <- diff(log(BNB$`BNB-USD.Adjusted`))
r_t=cbind(ln_BTC, ln_ETH, ln_BNB)
returns = window(r_t, start = "2017-11-10")
xspec = ugarchspec(mean.model = list(armaOrder = c(1, 1)), variance.model = list(garchOrder = c(1,1), model = 'sGARCH'), distribution.model = 'norm')
uspec = multispec(replicate(3, xspec))
spec1 = dccspec(uspec = uspec, dccOrder = c(1, 1), distribution = 'mvnorm')
spec1a = dccspec(uspec = uspec, dccOrder = c(1, 1), model='aDCC', distribution = 'mvnorm')
cl = makePSOCKcluster(3)
multf = multifit(uspec, returns, cluster = cl)
fit1 = dccfit(spec1, data = returns, fit.control = list(eval.se = TRUE, scale = TRUE), fit = multf, cluster = cl)
print(fit1)
plot(fit1, which=1)
plot(fit1, which=2)
plot(fit1, which=3)
plot(fit1, which=4)
plot(fit1, which=5)
#install.packages("dynlm")
#install.packages("moments")
#install.packages("broom")
#install.packages("FinTS")
#install.packages('rugarch')
#install.packages("tsbox")
#install.packages("metRology")
#install.packages("expm")
#install.packages("MTS")
#install.packages("rmgarch")
#install.packages("Rcpp")
library(expm)
library(Matrix)
library(ggplot2)
library(quantmod)
library(moments)
library(dynlm)
library(broom)
library(FinTS)
library(lubridate)
library(forecast)
library(readxl)
library(MASS)
library(rugarch)
library(tsbox)
library(MTS)
library(rmgarch)
library(Rcpp)
options("getSymbols.warning4.0"=FALSE)
BTC <-getSymbols("BTC-USD", src = "yahoo", auto.assign = FALSE)
BTC <- na.omit(BTC)
chartSeries(BTC,TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2021',
theme="white")
head(BTC)
View(BTC)
plot(BTC$`BTC-USD.Adjusted`)
logret <- ts(diff(log(BTC$`BTC-USD.Adjusted`))[-1])
plot(logret)
plot(logret)
acf(logret)
plot(abs(logret))
acf(abs(logret))
logret_random <- sample(as.vector(logret), size =  length(logret), replace = FALSE)
acf(abs(logret_random))
par(mfrow = c(1,2))
plot(logret)
plot(logret_random, type = 'l')
logret_mean = dynlm(logret~1)
summary(logret_mean)
ehatsq = ts(resid(logret_mean)^2)
ehatsq
ehatsq = ts(resid(logret_mean)^2)
ARCH_m = dynlm(ehatsq~L(ehatsq))
summary(ARCH_m)
logret_mean = dynlm(logret~1)
summary(logret_mean)
ehatsq = ts(resid(logret_mean)^2)
ARCH_m = dynlm(ehatsq~L(ehatsq))
summary(ARCH_m)
acf(ARCH_m$residuals)
acf(abs(ARCH_m$residuals))
ArchTest(logret, lags = 1, demean = TRUE)
ArchTest(logret, lags = 2, demean = TRUE)
ArchTest(logret, lags = 3, demean = TRUE)
ArchTest(logret, lags = 12, demean = TRUE)
logret_mean = dynlm(logret~1)
summary(logret_mean)
ehatsq = ts(resid(logret_mean)^2)
ARCH_m = dynlm(ehatsq~L(ehatsq))
summary(ARCH_m)
acf(ARCH_m$residuals)
acf(abs(ARCH_m$residuals))
ArchTest(logret, lags = 1, demean = TRUE)
library(rugarch)
auto.arima(logret)
model.spec = ugarchspec( variance.model = list(model = 'sGARCH' , garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(2,0)), distribution.model = "std")
model.spec = ugarchspec( variance.model = list(model = 'sGARCH' , garchOrder = c(1, 0)),
mean.model = list(armaOrder = c(2,0)), distribution.model = "std")
arch.fit = ugarchfit(spec = model.spec , data = logret, solver = 'solnp')
arch.fit@fit$matcoef
model.spec = ugarchspec(variance.model = list(model = 'sGARCH' , garchOrder = c(0,1)),
mean.model = list(armaOrder = c(2,0)), distribution.model = "std")
fit.garch.n = ugarchfit(spec = model.spec, data = logret, solver = "solnp")
fit.garch.n = ugarchfit(spec = model.spec, data = logret, solver = "solnp")
fit.garch.n@fit$matcoef
boot.garch <- ugarchboot(arch.fit,
method = "Partial",
sampling = "raw",  #bootstrap from fitted varepsilon
n.ahead = 1,          #simulation horizon
n.bootpred = 100000, #number of simulations
solver = "solnp")
boot.garch <- ugarchboot(arch.fit,
method = "Partial",
sampling = "raw",  #bootstrap from fitted varepsilon
n.ahead = 1,          #simulation horizon
n.bootpred = 100000, #number of simulations
solver = "solnp")
boot.garch
boot.garch <- ugarchboot(fit.garch.n,
method = "Partial",
sampling = "raw",  #bootstrap from fitted varepsilon
n.ahead = 1,          #simulation horizon
n.bootpred = 100000, #number of simulations
solver = "solnp")
boot.garch <- ugarchboot(fit.garch.n,
method = "Partial",
sampling = "raw",  #bootstrap from fitted varepsilon
n.ahead = 1,          #simulation horizon
n.bootpred = 100000, #number of simulations
solver = "solnp")
boot.garch
infocriteria(fit.garch.n)
source("Lag_Opt_GARCH.R")
View(Lag_Opt_GARCH)
Lag_Opt_GARCH(ehatsq,4,4)
model.spec = ugarchspec(variance.model = list(model = 'sGARCH' , garchOrder = c(4,2)),
mean.model = list(armaOrder = c(2,0)), distribution.model = "std")
model.fit = ugarchfit(spec = model.spec , data = logret, solver = 'solnp')
model.fit = ugarchfit(spec = model.spec , data = logret, solver = 'solnp')
model.fit@fit$matcoef
model.spec = ugarchspec(variance.model = list(model = 'sGARCH' , garchOrder = c(1,1)),
mean.model = list(armaOrder = c(4,2)), distribution.model = "std")
model.fit = ugarchfit(spec = model.spec , data = logret, solver = 'solnp')
spec = getspec(model.fit)
setfixed(spec) <- as.list(coef(model.fit))
forecast = ugarchforecast(spec, n.ahead = 12, n.roll = 0, logret)
sigma(forecast)
fitted(forecast)
forecast
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
#
library(ggplot2)
library(dplyr)
library(stats)
library(lmtest)
library(foreign)
library(readxl)
library(plm)
library(tidyr)
library(MASS)
library(rmgarch)
library(parallel)
options(scipen = 4)
Data = read_excel("Datos_GARCH.xlsx")
Data = read_excel("Datos_1200_V2.xls")
head(Data)
#
xspec = ugarchspec( mean.model = list(armaOrder = c(3, 0)),
variance.model = list(garchOrder = c(1,1), model = 'sGARCH'),
distribution.model = 'norm')
#
uspec = multispec(replicate(3, xspec))
#
spec1 = dccspec(uspec = uspec, dccOrder = c(1, 1), distribution = 'mvnorm')
spec1a = dccspec(uspec = uspec, dccOrder = c(1, 1), model='aDCC', distribution = 'mvnorm')
#
Data[, c("DLIGAE_MX1200", "DLPPI_MX1200", "DLTC1200")]
summary(mgarch_model)
llk_M_Garch_M_V1 <- function(B, Yt, Yt_1, Yt_2, Yt_3, Zt) {
#
T <- nrow(Yt)
N <- ncol(Yt)
one <- matrix(1, T, N)
#
resid <- Yt - matrix(rep(matrix(B[1:3], 1, N, byrow = TRUE), each = 10), nrow = T, ncol = N) -
t(matrix(c(B[4], B[5], B[6], B[13], B[14], B[15], B[22], B[23], B[24]), N, N, byrow = TRUE) %*% t(Yt_1)) -
t(matrix(c(B[7], B[8], B[9], B[16], B[17], B[18], B[25], B[26], B[27]), N, N, byrow = TRUE) %*% t(Yt_2)) -
t(matrix(c(B[10], B[11], B[12], B[19], B[20], B[21], B[28], B[29], B[30]), N, N, byrow = TRUE) %*% t(Yt_3)) -
t(matrix(c(B[55], B[58], B[56], B[59], B[57], B[60]), N, 2) %*% t(Zt))
#
Ht <- unlist(cov(resid))
#
Ut1 <- unlist( Yt[1,1] - B[1] - matrix(B[4:6], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[7:9], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[10:12], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[31:33], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[55]*Zt[1,1] - B[58]*Zt[1,2] )
#
Ut2 <- unlist( Yt[1,2] - B[2] - matrix(B[13:15], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[16:18], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[19:21], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[34:36], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[56]*Zt[1,1] - B[59]*Zt[1,2] )
#
Ut3 <- unlist( Yt[1,3] - B[3] - matrix(B[22:24], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[25:27], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[28:30], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[37:39], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[57]*Zt[1,1] - B[60]*Zt[1,2] )
#
LLK <- 0
#
for (t in 2:T) {
#
S2t1 <- unlist( B[40] + B[43]*Ut1^2 + B[46]*Ht[1,1] + B[49]*Yt[t-1,1] )
S2t2 <- unlist( B[41] + B[44]*Ut2^2 + B[47]*Ht[2,2] + B[50]*Yt[t-1,2] )
S2t3 <- unlist( B[42] + B[45]*Ut3^2 + B[48]*Ht[3,3] + B[51]*Yt[t-1,3] )
S2t12 <- unlist( B[52]*sqrt(S2t1*S2t2) )
S2t13 <- unlist( B[53]*sqrt(S2t1*S2t3) )
S2t23 <- unlist( B[54]*sqrt(S2t2*S2t3) )
#
Ut1 <- unlist( Yt[t,1] - B[1] - matrix(B[4:6], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[7:9], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[10:12], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[31:33], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[55]*Zt[t,1] - B[58]*Zt[t,2] )
#
Ut2 <- unlist( Yt[t,2] - B[2] - matrix(B[13:15], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[16:18], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[19:21], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[34:36], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[56]*Zt[t,1] - B[59]*Zt[t,2] )
#
Ut3 <- unlist( Yt[t,3] - B[3] - matrix(B[22:24], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[25:27], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[28:30], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[37:39], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[57]*Zt[t,1] - B[60]*Zt[t,2] )
#
Ut <- unlist( matrix(c(Ut1, Ut2, Ut3), 1, N, byrow = TRUE) )
#
Ht <- unlist( matrix(c(S2t1, S2t12, S2t13, S2t12, S2t2, S2t23, S2t13, S2t23, S2t3), N, N, byrow = TRUE) )
#
llkt <- - (N/2)*log(2*pi) - (1/2)*log(max(1e-10,det(Ht))) - (1/2)*(max(1e-10,Ut %*% ginv(Ht) %*% t(Ut)))
#
llkt <- -llkt
LLK <- LLK + llkt
print(Ht)
print(ginv(Ht))
print( Ut %*% ginv(Ht) %*% t(Ut) )
print(t)
}
#
llkGARCHM <- LLK
return(llkGARCHM)
}
#
Y = Data[ , c('DLIGAE_MX1200', 'DLPPI_MX1200', 'DLTC1200')]
Z = Data[ , c('DLIP_US1200', 'DLOILP1200')]
# Definir el número de rezagos
L <- 3  # Ajustar según sea necesario
# Tamaño de Y
T <- nrow(Y)
# Crear matrices rezagadas
Yt <- Y[(L+1):T, ]
Zt <- Z[L:(T-1), ]
Yt_1 <- Y[L:(T-1), ]
Yt_2 <- Y[(L-1):(T-2), ]
Yt_3 <- Y[(L-2):(T-3), ]
# Definir parámetros iniciales (ajustar según sea necesario)
B1 <- c(2, 4, 7)
B11 <- c(-0.10, -0.24, -0.03, -0.01, 0.02, -0.06, -0.06, 0.12, -0.02)
B12 <- c(0.00, 0.29, 0.05, 0.02, 0.12, 0.03, 0.00, 0.14, 0.01)
B13 <- c(-0.22, 0.01, 0.12, -0.04, 0.31, -0.16, 0.01, -0.33, 0.03)
Theta <- c(0.62, -0.5, -0.5, 0.5, 1.19, 0, 0, 0, 0.17)
Alpha <- c(80, 60, 639.08, 0.39, 0.71, 0.35, 0.05, 0.21, 0.12, 0.13, 3.40, 24.56)
Corr <- c(0.13, -0.04, 0.56)
Psi <- c(0.46, 0.17, 0.21, 0.01, -0.00, -0.03)
# Concatenar todos los parámetros iniciales
B0 <- c(B1, B11, B12, B13, Theta, Alpha, Corr, Psi)
# Definir la función objetivo
L <- function(B) {
-llk_M_Garch_M_V1(B, Yt, Yt_1, Yt_2, Yt_3, Zt)
}
# Opciones de optimización
options <- list(maxit = 1 , reltol = 1e-10)
# Optimización
optim_result <- optim(B0, L, gr = "BFGS",
method = "Nelder-Mead", control = options)
llk_M_Garch_M_V1 <- function(B, Yt, Yt_1, Yt_2, Yt_3, Zt) {
#
T <- nrow(Yt)
N <- ncol(Yt)
one <- matrix(1, T, N)
#
resid <- Yt - matrix(rep(matrix(B[1:3], 1, N, byrow = TRUE), each = 10), nrow = T, ncol = N) -
t(matrix(c(B[4], B[5], B[6], B[13], B[14], B[15], B[22], B[23], B[24]), N, N, byrow = TRUE) %*% t(Yt_1)) -
t(matrix(c(B[7], B[8], B[9], B[16], B[17], B[18], B[25], B[26], B[27]), N, N, byrow = TRUE) %*% t(Yt_2)) -
t(matrix(c(B[10], B[11], B[12], B[19], B[20], B[21], B[28], B[29], B[30]), N, N, byrow = TRUE) %*% t(Yt_3)) -
t(matrix(c(B[55], B[58], B[56], B[59], B[57], B[60]), N, 2) %*% t(Zt))
#
Ht <- unlist(cov(resid))
#
Ut1 <- unlist( Yt[1,1] - B[1] - matrix(B[4:6], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[7:9], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[10:12], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[31:33], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[55]*Zt[1,1] - B[58]*Zt[1,2] )
#
Ut2 <- unlist( Yt[1,2] - B[2] - matrix(B[13:15], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[16:18], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[19:21], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[34:36], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[56]*Zt[1,1] - B[59]*Zt[1,2] )
#
Ut3 <- unlist( Yt[1,3] - B[3] - matrix(B[22:24], 1, N, byrow = TRUE) %*% t(Yt_1[1, ]) -
matrix(B[25:27], 1, N, byrow = TRUE) %*% t(Yt_2[1, ]) -
matrix(B[28:30], 1, N, byrow = TRUE) %*% t(Yt_3[1, ]) -
matrix(B[37:39], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[57]*Zt[1,1] - B[60]*Zt[1,2] )
#
LLK <- 0
#
for (t in 2:T) {
#
S2t1 <- unlist( B[40] + B[43]*Ut1^2 + B[46]*Ht[1,1] + B[49]*Yt[t-1,1] )
S2t2 <- unlist( B[41] + B[44]*Ut2^2 + B[47]*Ht[2,2] + B[50]*Yt[t-1,2] )
S2t3 <- unlist( B[42] + B[45]*Ut3^2 + B[48]*Ht[3,3] + B[51]*Yt[t-1,3] )
S2t12 <- unlist( B[52]*sqrt(S2t1*S2t2) )
S2t13 <- unlist( B[53]*sqrt(S2t1*S2t3) )
S2t23 <- unlist( B[54]*sqrt(S2t2*S2t3) )
#
Ut1 <- unlist( Yt[t,1] - B[1] - matrix(B[4:6], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[7:9], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[10:12], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[31:33], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[55]*Zt[t,1] - B[58]*Zt[t,2] )
#
Ut2 <- unlist( Yt[t,2] - B[2] - matrix(B[13:15], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[16:18], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[19:21], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[34:36], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[56]*Zt[t,1] - B[59]*Zt[t,2] )
#
Ut3 <- unlist( Yt[t,3] - B[3] - matrix(B[22:24], 1, N, byrow = TRUE) %*% t(Yt_1[t, ]) -
matrix(B[25:27], 1, N, byrow = TRUE) %*% t(Yt_2[t, ]) -
matrix(B[28:30], 1, N, byrow = TRUE) %*% t(Yt_3[t, ]) -
matrix(B[37:39], 1, N, byrow = TRUE) %*% diag(Ht)^0.5 -
B[57]*Zt[t,1] - B[60]*Zt[t,2] )
#
Ut <- unlist( matrix(c(Ut1, Ut2, Ut3), 1, N, byrow = TRUE) )
#
Ht <- unlist( matrix(c(S2t1, S2t12, S2t13, S2t12, S2t2, S2t23, S2t13, S2t23, S2t3), N, N, byrow = TRUE) )
#
llkt <- - (N/2)*log(2*pi) - (1/2)*log(max(1e-10,det(Ht))) - (1/2)*(max(1e-10,Ut %*% ginv(Ht) %*% t(Ut)))
#
llkt <- -llkt
LLK <- LLK + llkt
# print(Ht)
# print(ginv(Ht))
# print( Ut %*% ginv(Ht) %*% t(Ut) )
# print(t)
print(LLK)
}
#
llkGARCHM <- LLK
return(llkGARCHM)
}
#
Y = Data[ , c('DLIGAE_MX1200', 'DLPPI_MX1200', 'DLTC1200')]
Z = Data[ , c('DLIP_US1200', 'DLOILP1200')]
# Definir el número de rezagos
L <- 3  # Ajustar según sea necesario
# Tamaño de Y
T <- nrow(Y)
# Crear matrices rezagadas
Yt <- Y[(L+1):T, ]
Zt <- Z[L:(T-1), ]
Yt_1 <- Y[L:(T-1), ]
Yt_2 <- Y[(L-1):(T-2), ]
Yt_3 <- Y[(L-2):(T-3), ]
# Definir parámetros iniciales (ajustar según sea necesario)
B1 <- c(2, 4, 7)
B11 <- c(-0.10, -0.24, -0.03, -0.01, 0.02, -0.06, -0.06, 0.12, -0.02)
B12 <- c(0.00, 0.29, 0.05, 0.02, 0.12, 0.03, 0.00, 0.14, 0.01)
B13 <- c(-0.22, 0.01, 0.12, -0.04, 0.31, -0.16, 0.01, -0.33, 0.03)
Theta <- c(0.62, -0.5, -0.5, 0.5, 1.19, 0, 0, 0, 0.17)
Alpha <- c(80, 60, 639.08, 0.39, 0.71, 0.35, 0.05, 0.21, 0.12, 0.13, 3.40, 24.56)
Corr <- c(0.13, -0.04, 0.56)
Psi <- c(0.46, 0.17, 0.21, 0.01, -0.00, -0.03)
# Concatenar todos los parámetros iniciales
B0 <- c(B1, B11, B12, B13, Theta, Alpha, Corr, Psi)
# Definir la función objetivo
L <- function(B) {
-llk_M_Garch_M_V1(B, Yt, Yt_1, Yt_2, Yt_3, Zt)
}
# Opciones de optimización
options <- list(maxit = 1 , reltol = 1e-10)
# Optimización
optim_result <- optim(B0, L, gr = "BFGS",
method = "Nelder-Mead", control = options)
?optim
#
Y = Data[ , c('DLIGAE_MX1200', 'DLPPI_MX1200', 'DLTC1200')]
Z = Data[ , c('DLIP_US1200', 'DLOILP1200')]
# Definir el número de rezagos
L <- 3  # Ajustar según sea necesario
# Tamaño de Y
T <- nrow(Y)
# Crear matrices rezagadas
Yt <- Y[(L+1):T, ]
Zt <- Z[L:(T-1), ]
Yt_1 <- Y[L:(T-1), ]
Yt_2 <- Y[(L-1):(T-2), ]
Yt_3 <- Y[(L-2):(T-3), ]
# Definir parámetros iniciales (ajustar según sea necesario)
B1 <- c(2, 4, 7)
B11 <- c(-0.10, -0.24, -0.03, -0.01, 0.02, -0.06, -0.06, 0.12, -0.02)
B12 <- c(0.00, 0.29, 0.05, 0.02, 0.12, 0.03, 0.00, 0.14, 0.01)
B13 <- c(-0.22, 0.01, 0.12, -0.04, 0.31, -0.16, 0.01, -0.33, 0.03)
Theta <- c(0.62, -0.5, -0.5, 0.5, 1.19, 0, 0, 0, 0.17)
Alpha <- c(80, 60, 639.08, 0.39, 0.71, 0.35, 0.05, 0.21, 0.12, 0.13, 3.40, 24.56)
Corr <- c(0.13, -0.04, 0.56)
Psi <- c(0.46, 0.17, 0.21, 0.01, -0.00, -0.03)
# Concatenar todos los parámetros iniciales
B0 <- c(B1, B11, B12, B13, Theta, Alpha, Corr, Psi)
# Definir la función objetivo
L <- function(B) {
-llk_M_Garch_M_V1(B, Yt, Yt_1, Yt_2, Yt_3, Zt)
}
# Opciones de optimización
options <- list(reltol = 1e-1)
# Optimización
optim_result <- optim(B0, L, gr = "BFGS",
method = "Nelder-Mead", control = options)
#
Y = Data[ , c('DLIGAE_MX1200', 'DLPPI_MX1200', 'DLTC1200')]
Z = Data[ , c('DLIP_US1200', 'DLOILP1200')]
# Definir el número de rezagos
L <- 3  # Ajustar según sea necesario
# Tamaño de Y
T <- nrow(Y)
# Crear matrices rezagadas
Yt <- Y[(L+1):T, ]
Zt <- Z[L:(T-1), ]
Yt_1 <- Y[L:(T-1), ]
Yt_2 <- Y[(L-1):(T-2), ]
Yt_3 <- Y[(L-2):(T-3), ]
# Definir parámetros iniciales (ajustar según sea necesario)
B1 <- c(2, 4, 7)
B11 <- c(-0.10, -0.24, -0.03, -0.01, 0.02, -0.06, -0.06, 0.12, -0.02)
B12 <- c(0.00, 0.29, 0.05, 0.02, 0.12, 0.03, 0.00, 0.14, 0.01)
B13 <- c(-0.22, 0.01, 0.12, -0.04, 0.31, -0.16, 0.01, -0.33, 0.03)
Theta <- c(0.62, -0.5, -0.5, 0.5, 1.19, 0, 0, 0, 0.17)
Alpha <- c(80, 60, 639.08, 0.39, 0.71, 0.35, 0.05, 0.21, 0.12, 0.13, 3.40, 24.56)
Corr <- c(0.13, -0.04, 0.56)
Psi <- c(0.46, 0.17, 0.21, 0.01, -0.00, -0.03)
# Concatenar todos los parámetros iniciales
B0 <- c(B1, B11, B12, B13, Theta, Alpha, Corr, Psi)
# Definir la función objetivo
L <- function(B) {
-llk_M_Garch_M_V1(B, Yt, Yt_1, Yt_2, Yt_3, Zt)
}
# Opciones de optimización
options <- list(reltol = 10)
# Optimización
optim_result <- optim(B0, L, gr = "BFGS",
method = "Nelder-Mead", control = options)
#
Y = Data[ , c('DLIGAE_MX1200', 'DLPPI_MX1200', 'DLTC1200')]
Z = Data[ , c('DLIP_US1200', 'DLOILP1200')]
# Definir el número de rezagos
L <- 3  # Ajustar según sea necesario
# Tamaño de Y
T <- nrow(Y)
# Crear matrices rezagadas
Yt <- Y[(L+1):T, ]
Zt <- Z[L:(T-1), ]
Yt_1 <- Y[L:(T-1), ]
Yt_2 <- Y[(L-1):(T-2), ]
Yt_3 <- Y[(L-2):(T-3), ]
# Definir parámetros iniciales (ajustar según sea necesario)
B1 <- c(2, 4, 7)
B11 <- c(-0.10, -0.24, -0.03, -0.01, 0.02, -0.06, -0.06, 0.12, -0.02)
B12 <- c(0.00, 0.29, 0.05, 0.02, 0.12, 0.03, 0.00, 0.14, 0.01)
B13 <- c(-0.22, 0.01, 0.12, -0.04, 0.31, -0.16, 0.01, -0.33, 0.03)
Theta <- c(0.62, -0.5, -0.5, 0.5, 1.19, 0, 0, 0, 0.17)
Alpha <- c(80, 60, 639.08, 0.39, 0.71, 0.35, 0.05, 0.21, 0.12, 0.13, 3.40, 24.56)
Corr <- c(0.13, -0.04, 0.56)
Psi <- c(0.46, 0.17, 0.21, 0.01, -0.00, -0.03)
# Concatenar todos los parámetros iniciales
B0 <- c(B1, B11, B12, B13, Theta, Alpha, Corr, Psi)
# Definir la función objetivo
L <- function(B) {
-llk_M_Garch_M_V1(B, Yt, Yt_1, Yt_2, Yt_3, Zt)
}
# Opciones de optimización
options <- list(reltol = 500)
# Optimización
optim_result <- optim(B0, L, gr = "BFGS",
method = "Nelder-Mead", control = options)
